name: Build and Test
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  segyio_version: '1.9.13'
  python_version: '3.11'

jobs:
  build:
    name: Ubuntu latest, FFTW ${{ matrix.fftw }}
    strategy:
      matrix:
        fftw: ["ON", "OFF"]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential \
          libboost-dev libeigen3-dev libfftw3-dev

    # This installation of segyio is used to generate the experimental C++
    # headers needed to build si4ti. The Python interface is not build to
    # simplify the build prcoess. The Python interface is instead installed via
    # pip (see below).
    - name: Build and install segyio
      run: |
        git clone --branch "v${{ env.segyio_version }}" https://github.com/equinor/segyio.git
        cd segyio
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=ON \
          -DBUILD_PYTHON=OFF \
          -DEXPERIMENTAL=ON \
          -DBUILD_TESTING=OFF \
          -DBUILD_BIN=OFF
        make -j
        sudo make install

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '${{ env.python_version }}'
        cache: 'pip'

    # This installation of segyio is used within the tests run by `make diff`.
    - name: Install Python dependencies for tests
      run: pip install "segyio==${{ env.segyio_version }}" pytest pytest-memray xtgeo

    - name: Build, test, and install (CMake)
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DUSE_FFTW=${{ matrix.fftw }} \
              ..
        make -j
        ctest --output-on-failure
        make diff

    - name: Build Python bindings using pip
      run: |
        python -m pip install \
          -Ccmake.define.CMAKE_BUILD_TYPE=Release \
          -Ccmake.define.USE_FFTW=${{ matrix.fftw }} \
          . --verbose

    - name: Test Python bindings built via pip
      run: |
        cd python
        python -m pytest --memray tests/

  # Compatibility with Red Hat Enterprise Linux 8
  build-almalinux-8:
    name: Alma Linux 8 (RHEL8 compatibility), FFTW ${{ matrix.fftw }}
    strategy:
      matrix:
        fftw: ["ON", "OFF"]
    runs-on: ubuntu-latest
    container:
      image: almalinux:8
    steps:
    - name: Install dependencies
      run: |
        dnf -y update
        dnf -y install dnf-plugins-core
        dnf -y config-manager --set-enabled powertools
        dnf -y group install 'Development Tools'
        dnf -y install fftw3-devel gcc-toolset-13 eigen3-devel cmake wget python${{ env.python_version }} python${{ env.python_version }}-devel

    - uses: actions/checkout@v4

    # Boost 1.76 is required, but Red Hat 8 does only provide Boost 1.66 by
    # default. We use Boost 1.79.0 to reproduce the Travis build being used
    # earlier for testing and releasing.
    - name: Install Boost
      run: |
        wget https://archives.boost.io/release/1.79.0/source/boost_1_79_0.tar.gz
        ls -l
        tar xf boost_1_79_0.tar.gz
        pushd boost_1_79_0
        scl enable gcc-toolset-13 "./bootstrap.sh --with-libraries=math"
        scl enable gcc-toolset-13 "./b2 -j 2"
        scl enable gcc-toolset-13 "./b2 install"
        popd
        rm -rf boost_1_79_0

    # segyio is installed from source in this step and using pip in following
    # step. For the reasoning, check the comment in the job that runs the tests
    # on Ubuntu (see above).
    - name: Build and install segyio
      run: |
        git clone --branch v${{ env.segyio_version }} https://github.com/equinor/segyio.git
        cd segyio
        mkdir build
        cd build
        scl enable gcc-toolset-13 "cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DBUILD_PYTHON=OFF -DEXPERIMENTAL=ON -DBUILD_TESTING=OFF -DBUILD_BIN=OFF"
        scl enable gcc-toolset-13 "make -j"
        scl enable gcc-toolset-13 "make install"

    # We need to patch the segyio header to find some integer definitions on
    # Fedora and Red Hat Enterprise Linux compatible distributions.
    #
    # TODO: Remove this step once a new segyio release fixes this issue.
    - name: Patch segyio experimental header
      run: |
          sed -i 's/#include <cstring>/#include <cstdint>\n#include <cstring>/' /usr/local/include/segyio/segyio.hpp

    - name: Install Python dependencies
      run: |
        python${{ env.python_version }} -m venv venv
        source venv/bin/activate
        python -m ensurepip --upgrade
        python -m pip install --upgrade pip
        python -m pip install "segyio==${{ env.segyio_version }}" pytest pytest-memray xtgeo
        echo PATH=${PATH} >> $GITHUB_ENV

    - name: Build, test, and install (CMake)
      run: |
        mkdir build
        pushd build
        source scl_source enable gcc-toolset-13 && cmake -DCMAKE_BUILD_TYPE=Release \
              -DUSE_FFTW=${{ matrix.fftw }} \
              ..
        scl enable gcc-toolset-13 "make -j"
        ctest --output-on-failure
        make diff
        make install

    - name: Build Python bindings using pip
      run: |
        source scl_source enable gcc-toolset-13 && python -m pip install \
          -Ccmake.define.CMAKE_BUILD_TYPE=Release \
          -Ccmake.define.USE_FFTW=${{ matrix.fftw }} \
          . --verbose

    - name: Test Python bindings
      run: |
        cd python
        python -m pytest --memray tests/
