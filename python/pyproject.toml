[build-system]
requires = ["scikit-build-core>=0.10.0", "pybind11"]
build-backend = "scikit_build_core.build"

[project]
name = "si4ti"
version = "1.1.0"
description = "si4ti is a LGPL licensed seismic inversion tool for monitoring effects in 4D seismic from changes in acoustic properties of a reservoir."
readme = "../README.md"
authors = [
  { name = "Equinor ASA" },
]
maintainers = [
  { name = "Equinor ASA" },
]
license = { file = "../LICENSE" }
requires-python = ">=3.10"

dependencies = [
  "numpy>=1.20", # Minimum needed for typing support
  "xtgeo",
]

classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: C++",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Physics",
]

[project.urls]
Homepage = "https://github.com/equinor/si4ti"
"Bug Tracker" = "https://github.com/equinor/si4ti/issues"

[project.optional-dependencies]
test = [
  "pytest",
  "pytest-memray",
]

[tool.scikit-build]
wheel.expand-macos-universal-tags = true
minimum-version = "build-system.requires"
wheel.license-files = ["../LICENSE"]
build-dir = "build/{wheel_tag}"

[tool.scikit-build.cmake.define]
# By default, don't use FFTW. It would imply license changes if we would
# bundle it with the Python bindings.
USE_FFTW = false

[tool.cibuildwheel]
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
build = "*"
# Don't build for PyPy, Win32, i686, and musllinux
# Cannot build for linux_aarch64 due to missing xtgeo release
# Don't build on Python 3.9 as it is almost end of life and we cannot test the
# wheels on MacOS due to issues with h2py
skip = "pp* *-win32 *_i686 *musllinux* *_aarch64 cp39-*"
test-extras = "test"
test-command = "cd {project}/python && pytest --memray tests --color=yes -v"
build-verbosity = 1

# Some target/architecture specific configuration is set in the GitHub workflow
# building the wheels because it is simpler to set these configurations
# target-dependent in the workflow.
[tool.cibuildwheel.linux]
before-all = "yum install -y make gcc gcc-c++ make eigen3-devel libomp-devel"

[tool.cibuildwheel.macos]
before-all = [ "brew install --formula eigen libomp cmake" ]
